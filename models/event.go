package models

import (
	"github.com/sean-d/Booklyifywizzbangthingaroo/db"
	"time"
)

type Event struct {
	// defining what the gin json bind should expect to always get

	ID          int64
	Name        string    `binding:"required"`
	Description string    `binding:"required"`
	Location    string    `binding:"required"`
	DateTime    time.Time `binding:"required"`
	UserID      int64
}

//var events []Event

func (e *Event) Save() error {
	// ?s are to help prevent sql injections
	// we omit the id as that will be autogenerated and we will assign it once generated
	query := `
	insert into events(name, description, location, date_time, user_id)
	VALUES (?, ?, ?, ?, ?)`

	statement, err := db.DB.Prepare(query)

	// we want to close once everything is complete in this function, so we will defer it here.
	defer statement.Close()

	if err != nil {
		// have error handled if save fails
		return err
	}

	// this replaces all ?s with values. Order matters
	result, err := statement.Exec(e.Name, e.Description, e.Location, e.DateTime, e.UserID)
	if err != nil {
		return err
	}

	// we get the unique ID of the created event and assign it to the
	e.ID, err = result.LastInsertId()

	return err // if there's an error, return it
}

func GetAllEvents() ([]Event, error) {

	// establish the query
	query := "SELECT * FROM events"

	// query the db and store the returned rows
	rows, err := db.DB.Query(query)

	if err != nil {
		return nil, err
	}

	defer rows.Close()

	// establish the events slice to be returned
	var events []Event

	for rows.Next() {
		var event Event
		// scan each row and for the item found, inject into the pointed location of the event struct
		err = rows.Scan(&event.ID, &event.Name, &event.Description, &event.Location, &event.DateTime, &event.UserID)

		if err != nil {
			return nil, err
		}

		// add each retrieved row to the events slice
		events = append(events, event)
	}

	return events, nil
}

func GetEvent(eventID int64) (*Event, error) {
	/* Grab the single event by id and return a pointer to the event or the null value of said pointer.
	We are using a pointer to Event, so we can return nil as null value for a pointer is nil as null is the memory address of a non-existent pointer.
	*/

	query := "SELECT * FROM events where id = ?"

	row := db.DB.QueryRow(query, eventID)

	var event Event
	err := row.Scan(&event.ID, &event.Name, &event.Description, &event.Location, &event.DateTime, &event.UserID)

	if err != nil {
		return nil, err
	}

	return &event, nil
}

func (e *Event) UpdateEvent() error {
	query := `
	Update events
	SET name = ?, description = ?, location = ?, date_time = ?
	WHERE id = ?
    `

	statement, err := db.DB.Prepare(query)
	if err != nil {
		return err
	}
	defer statement.Close()

	_, err = statement.Exec(e.Name, e.Description, e.Location, e.DateTime, e.ID) // same order as the query above, e.ID satisfies the WHERE

	return err // will return an error from the statement.Exec or nil; satisfying the method return

}

func (e *Event) DeleteEvent() error {
	query := `
	DELETE FROM events WHERE id = ?
	`

	statement, err := db.DB.Prepare(query)
	if err != nil {
		return err
	}
	defer statement.Close()
	_, err = statement.Exec(e.ID)
	return err
}
